geom_point(alpha = .4) +
geom_line(data = as.data.frame(runKMeans[, 301:302]),
mapping = aes(V1, V2, color = "1")) +
geom_line(data = as.data.frame(runKMeans[, 303:304]),
mapping = aes(V1, V2, color = "2")) +
geom_line(data = as.data.frame(runKMeans[, 305:306]),
mapping = aes(V1, V2, color = "3")) +
geom_point(data = as.data.frame(runKMeans[, 301:302]),
aes(V1, V2, color = "1"), shape = 4, size = 3) +
geom_point(data = as.data.frame(runKMeans[, 303:304]),
aes(V1, V2, color = "2"), shape = 4, size = 3) +
geom_point(data = as.data.frame(runKMeans[, 305:306]),
aes(V1, V2, color = "3"), shape = 4, size = 3)
g2
# Chunk 13: random-init
# Chunk 14: test-random-init
set.seed(12345)
randomInit(ex7data2[,1:2], 3)
bird_small <- t(read.csv("../data/ex7data/bird_small.csv"))
birdInit <- randomInit(bird_small, 16)
startTime <- system.time()
kMeansBird <- kMeans(bird_small, birdInit, 15)
system.time() - startTime
?system.time
Sys.time()
finalCentroid <- kMeansBird[nrow(kMeansBird),(ncol(kMeansBird)-16*3+1):ncol(kMeansBird)]
finalCentroid <- round(matrix(finalCentroid, nrow = 16, ncol = 3, byrow = TRUE))
compressedImage <- t(sapply(kMeansBird[nrow(kMeansBird), 1:128*128], FUN = function(x){
c(x, finalCentroid[x,])
}))
head(compressedImage)
compressedImage <- kMeansBird[nrow(kMeansBird), 1:128*128]
compressedImage <- kMeansBird[nrow(kMeansBird), 1:(128*128)]
compressedImage <- matrix(kMeansBird[nrow(kMeansBird), 1:(128*128)], nrow = 128)
compressedImage[1:16, 1:5]
head(finalCentroid)
r <- sapply(compressedImage, function(x){finalCentroid[x, 1]})
compressedImage <- matrix(kMeansBird[nrow(kMeansBird), 1:(128*128)])
r <- matrix(sapply(compressedImage, function(x){finalCentroid[x, 1]}), nrow = 128)
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
library(grid)
read_chunk("ex7_chunks.R")
# Chunk 2: read-data2
ex7data2 <- read.csv("../data/ex7data/ex7data2.csv")
# Chunk 3: explore-data
g1 <- ggplot(ex7data2, aes(V1, V2)) + geom_point()
g1
# Chunk 4: min-Eu-dist
# Chunk 5: test-min-distance
initial_centroids <- matrix(c(3, 3, 6, 2, 8, 5), 3, 2, TRUE)
minEuDist(ex7data2[15,], initial_centroids)
# Chunk 6: find-closest-centroids
# Chunk 7: test-find-centroids
idx <- findClosestCentroids(ex7data2, initial_centroids)
idx[1:3]
# Chunk 8: compute-centroids
# Chunk 9: test-compute-centroids
computeCentroids(ex7data2, idx, initial_centroids)
# Chunk 10: k-means
# Chunk 11: test-k-means
runKMeans <- kMeans(ex7data2, initial_centroids, 10)
ex7data2 <- cbind(ex7data2, K = as.factor(runKMeans[nrow(runKMeans), 1:300]))
# Chunk 12: plot-test-k-means
g2 <- ggplot(ex7data2, aes(V1, V2, color = K)) +
geom_point(alpha = .4) +
geom_line(data = as.data.frame(runKMeans[, 301:302]),
mapping = aes(V1, V2, color = "1")) +
geom_line(data = as.data.frame(runKMeans[, 303:304]),
mapping = aes(V1, V2, color = "2")) +
geom_line(data = as.data.frame(runKMeans[, 305:306]),
mapping = aes(V1, V2, color = "3")) +
geom_point(data = as.data.frame(runKMeans[, 301:302]),
aes(V1, V2, color = "1"), shape = 4, size = 3) +
geom_point(data = as.data.frame(runKMeans[, 303:304]),
aes(V1, V2, color = "2"), shape = 4, size = 3) +
geom_point(data = as.data.frame(runKMeans[, 305:306]),
aes(V1, V2, color = "3"), shape = 4, size = 3)
g2
# Chunk 13: random-init
# Chunk 14: test-random-init
set.seed(12345)
randomInit(ex7data2[,1:2], 3)
# Chunk 15
bird_small <- t(read.csv("../data/ex7data/bird_small.csv"))
birdInit <- randomInit(bird_small, 16)
kMeansBird <- kMeans(bird_small, birdInit, 15)
# Chunk 16: compress-image
finalCentroid <- kMeansBird[nrow(kMeansBird),(ncol(kMeansBird)-16*3+1):ncol(kMeansBird)]
finalCentroid <- round(matrix(finalCentroid, nrow = 16, ncol = 3, byrow = TRUE))
# compressedImage <- t(sapply(kMeansBird[nrow(kMeansBird), 1:128*128], FUN = function(x){
#     c(x, finalCentroid[x,])
#     }))
compressedImage <- matrix(kMeansBird[nrow(kMeansBird), 1:(128*128)])
r <- matrix(sapply(compressedImage, function(x){finalCentroid[x, 1]}), nrow = 128)
g <- matrix(sapply(compressedImage, function(x){finalCentroid[x, 2]}), nrow = 128)
b <- matrix(sapply(compressedImage, function(x){finalCentroid[x, 3]}), nrow = 128)
col <- rgb(r, g, b)
dim(col) <- dim(r)
col
?rgb
?dim
compressedImage <- matrix(kMeansBird[nrow(kMeansBird), 1:(128*128)])
r <- sapply(compressedImage, function(x){finalCentroid[x, 1]})
g <- sapply(compressedImage, function(x){finalCentroid[x, 2]})
b <- sapply(compressedImage, function(x){finalCentroid[x, 3]})
col <- rgb(r, g, b)
?max
max(r)
max(g)
max(b)
debug(rgb)
col <- rgb(r, g, b)
compressedImage <- matrix(kMeansBird[nrow(kMeansBird), 1:(128*128)])
r <- sapply(compressedImage, function(x){finalCentroid[x, 1]})
g <- sapply(compressedImage, function(x){finalCentroid[x, 2]})
b <- sapply(compressedImage, function(x){finalCentroid[x, 3]})
col <- rgb(r, g, b)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r <- matrix(runif(9, 0, 1), 3)
g <- matrix(runif(9, 0, 1), 3)
b <- matrix(runif(9, 0, 1), 3)
col <- rgb(r, g, b)
dim(col) <- dim(r)
library(grid)
grid.raster(col, interpolate=FALSE)
r
?rgb
r <- sapply(compressedImage, function(x){finalCentroid[x, 1]})
g <- sapply(compressedImage, function(x){finalCentroid[x, 2]})
b <- sapply(compressedImage, function(x){finalCentroid[x, 3]})
col <- rgb(r, g, b, maxColorValue = 255)
dim(col) <- c(128, 128)
grid.raster(col, interpolate=FALSE)
ex7data1 <- read.csv("../data/ex7/ex7data1.csv")
setwd("ex7")
ex7data1 <- read.csv("../data/ex7/ex7data1.csv")
ex7data1 <- read.csv("../data/ex7data/ex7data1.csv")
g3 <- ggplot(ex7data1, aes(V1, V2))
g3
require(ggplot2)
require(knitr)
library(grid)
read_chunk("ex7_chunks.R")
ex7data1 <- read.csv("../data/ex7data/ex7data1.csv")
g3 <- ggplot(ex7data1, aes(V1, V2))
g3
ex7data1 <- read.csv("../data/ex7data/ex7data1.csv")
g3 <- ggplot(ex7data1, aes(V1, V2)) + geom_point()
g3
a <- svd(ex7data1)
ex71svd <- svd(ex7data1)
ex71svd
?svd
source('~/coursera-ml-R/ex7/ex7_chunks.R')
ex71normd <- featureNormalize(ex7data1)
source('~/coursera-ml-R/ex7/ex7_chunks.R')
ex71normd <- featureNormalize(ex7data1)
ex71svd <- svd(ex7data1)
?avg
source('~/coursera-ml-R/ex7/ex7_chunks.R')
ex71normd <- scale(ex7data1)
ex71svd <- svd(ex7data1)
ex71svd
head(ex7data1)
ex71svd <- svd(ex71normd)
ex71svd
ex71normd <- scale(ex7data1)
ex71svd <- svd(ex71normd)
ex71svd
ex71eigen <- eigen(ex71normd)
eig(ex71svd$v)
eigen(ex71svd$v)
eigen(ex71normd)
ex71svd$v
ggplot(ex71normd, aes(V1, V2)) + geom_point()
ggplot(as.data.frame(ex71normd), aes(V1, V2)) + geom_point()
?geom_abline
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = -0.3826834)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = 0.3826834) +
geom_abline(slope = -0.9238795, intercept = -0.9238795)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = -0.3826834) +
geom_abline(slope = 0.3826834, intercept = -0.9238795)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = -0.3826834) +
geom_abline(slope = 0.3826834, intercept = -0.9238795) +
geom_abline(slope = -0.3826834, intercept = -0.9238795)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = -0.3826834) +
geom_abline(slope = -0.3826834, intercept = -0.9238795)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = -0.9238795, intercept = -0.3826834)
cov(ex71normd)
eigen(cov(ex71normd))
ex71normd <- scale(ex7data1)
ex71svd <- svd(ex71normd)
ex71svd$v
ex71svd$d
?lines
ex71svd$v[2,1]/ex71svd$v[1,1]
ex71svd$v[2,2]/ex71svd$v[1,2]
set.seed(2)
x <- 1:100
y <- 20 + 3 * x
e <- rnorm(100, 0, 60)
y <- 20 + 3 * x + e
plot(x,y)
yx.lm <- lm(y ~ x)
lines(x, predict(yx.lm), col=”red”)
xy.lm <- lm(x ~ y)
lines(predict(xy.lm), y, col=”blue”)
plot(x,y)
yx.lm <- lm(y ~ x)
lines(x, predict(yx.lm), col=”red”)
lines(x, predict(yx.lm), col=1)
lines(x, predict(yx.lm), col=2)
xy.lm <- lm(x ~ y)
lines(predict(xy.lm), y, col=3)
#normalize means and cbind together
xyNorm <- cbind(x=x-mean(x), y=y-mean(y))
plot(xyNorm)
#covariance
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm, ylim=c(-200,200), xlim=c(-200,200))
lines(xyNorm[x], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x])
lines(xyNorm[x], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[x])
plot(xy)
plot(x, y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x]) + mean(y))
lines(x, predict(yx.lm), col=2)
lines(predict(xy.lm), y, col=3)
eigenVectors[2,1]/eigenVectors[1,1]
eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x]
eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x]) + mean(y)
(eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x])
ex71svd$v[2,2]/ex71svd$v[1,2] * xyNorm[x]
source('~/coursera-ml-R/ex7/ex7test.R', echo=TRUE)
covM <- cov(ex71svd)
eigenValues <- eigen(covM)$values
eigenVectors <- eigen(covM)$vectors
covM <- cov(ex71svd)
ex7data1 <- read.csv("../data/ex7data/ex7data1.csv")
ex71normd <- scale(ex7data1)
ex71svd <- svd(ex71normd)
covM <- cov(ex71svd)
covM <- cov(ex71normd)
eigenValues <- eigen(covM)$values
eigenVectors <- eigen(covM)$vectors
eigenValues
eigenVectors
ex71svd$d
ex71svd$v
plot(ex71normd)
lines(xyNorm[x], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x])
lines(xyNorm[x], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[x])
eigenVectors[2,1]/eigenVectors[1,1]
str(xyNorm)
xyNorm[x]
xyNorm
plot(ex71normd)
lines(ex71normd[nrow(ex71normd)],
eigenVectors[2,1]/eigenVectors[1,1] * ex71normd[nrow(ex71normd)])
lines(ex71normd[nrow(ex71normd)],
eigenVectors[2,2]/eigenVectors[1,2] * ex71normd[nrow(ex71normd)])
ex71normd[nrow(ex71normd)]
plot(ex71normd)
lines(ex71normd[1:nrow(ex71normd)],
eigenVectors[2,1]/eigenVectors[1,1] * ex71normd[1:nrow(ex71normd)])
lines(ex71normd[1:nrow(ex71normd)],
eigenVectors[2,2]/eigenVectors[1,2] * ex71normd[1:nrow(ex71normd)])
ex71normd[1:nrow(ex71normd)]
ex71normd
eigenVectors[2,1]/eigenVectors[1,1]
eigenVectors[2,2]/eigenVectors[1,2]
x <- 1:100
y <- 20 + 3 * x
e <- rnorm(100, 0, 60)
y <- 20 + 3 * x + e
plot(x,y)
yx.lm <- lm(y ~ x)
lines(x, predict(yx.lm), col=2)
xy.lm <- lm(x ~ y)
lines(predict(xy.lm), y, col=3)
#normalize means and cbind together
xyNorm <- cbind(x=x-mean(x), y=y-mean(y)) ## not standardized
plot(xyNorm)
#covariance
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
plot(xyNorm, ylim=c(-200,200), xlim=c(-200,200))
lines(xyNorm[x], eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x])
lines(xyNorm[x], eigenVectors[2,2]/eigenVectors[1,2] * xyNorm[x])
# the largest eigenValue is the first one
# so that’s our principal component.
# but the principal component is in normalized terms (mean=0)
# and we want it back in real terms like our starting data
# so let’s denormalize it
plot(x, y)
lines(x, (eigenVectors[2,1]/eigenVectors[1,1] * xyNorm[x]) + mean(y))
# that looks right. line through the middle as expected
# what if we bring back our other two regressions?
lines(x, predict(yx.lm), col=2)
lines(predict(xy.lm), y, col=3)
xyCov <- cov(xyNorm)
eigenValues <- eigen(xyCov)$values
eigenVectors <- eigen(xyCov)$vectors
eigenVectors[2,1]/eigenVectors[1,1]
eigenVectors[2,2]/eigenVectors[1,2]
eigenValues
ggplot(ex71normd, aes(V1, V2)) + geom_point() + geom_abline(slope = 1, 0)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
ex71normd <- apply(ex7data1, 2, function(x) x - mean(x))
head(ex71normd)
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point()
ex71normd <- apply(ex7data1, 2, function(x) x - mean(x))
ex71svd <- svd(ex71normd)
ex71svd$v
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = 1, intercept = 0)
covM <- cov(ex71normd)
eigenValues <- eigen(covM)$values
eigenVectors <- eigen(covM)$vectors
plot(ex71normd)
lines(ex71normd[1:nrow(ex71normd)],
eigenVectors[2,1]/eigenVectors[1,1] * ex71normd[1:nrow(ex71normd)])
lines(ex71normd[1:nrow(ex71normd)],
eigenVectors[2,2]/eigenVectors[1,2] * ex71normd[1:nrow(ex71normd)])
eigenVectors[2,1]/eigenVectors[1,1]
ex71svd$v[2,1]/ex71svd$v[1,1]
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = ex71svd$v[2,1]/ex71svd$v[1,1], intercept = 0)
ex71svd$d
ex71svd$v[2,2]/ex71svd$v[1,2]
ex71svd$v
ex71normd <- apply(ex7data1, 2, function(x) x - mean(x))
ex71svd <- svd(ex71normd)
ex71svd$v
ggplot(as.data.frame(ex71normd), aes(V1, V2)) +
geom_point() +
geom_abline(slope = ex71svd$v[2,1]/ex71svd$v[1,1], intercept = 0)
ex71svd
