errors <- validationCurve(polyFeatures(train$X, p = 8),
train$y,
polyFeatures(val$X, p = 8),
val$y,
lseq)
errors[, 1] <- 1:10 # for interpretability in the plot
plotLearningCurve(errors)
install.packages("ggplot2")
install.packages("knitr")
require(ggplot2)
# Chunk 1: dependencies
require(ggplot2)
# Chunk 2: read-data
train <- read.csv("../data/ex5train.csv")
val <- read.csv("../data/ex5val.csv")
test <- read.csv("../data/ex5test.csv")
# Chunk 3: viz-train
g1 <- ggplot(data = train, aes(X, y)) +
geom_point(shape = 4, color = "red", size = 3) +
labs(title = "Figure 1: Training Data",
x = "Change in water level (X)",
y = "Water flowing out of the dam (y)")
g1
# Chunk 4: ex1_chunks
knitr::read_chunk('../ex1/ex1_chunks.R')
# Chunk 5: lin-reg-cost-func
# Chunk 6: gradient-check
computeCost(cbind(1, train$X), train$y, c(1,1))
# Chunk 7: ex5_chunks
knitr::read_chunk('ex5_chunks.R')
# Chunk 8: trainLinearReg
# Chunk 9: optim
learnedTheta <- trainLinearReg(cbind(1, train$X), train$y)
# Chunk 10: plot-learnedTheta
g1 + geom_abline(slope = learnedTheta$par[2], intercept = learnedTheta$par[1])
lm(y ~ X + 1, train)$coefficients
learnedTheta$par
# Chunk 11: learningCurve
# Chunk 12: plot-learning-curves
errors <- learningCurve(cbind(1, train$X), train$y, cbind(1, val$X), val$y)
g2 <- plotLearningCurve(errors)
g2
# Chunk 13: polyFeatures
# Chunk 14: featureNormalize
# Chunk 15: polyPlots
# Chunk 16
polyPlots(train$X, train$y, val$X, val$y, n = 12, lambda = 0, p = 8)
# Chunk 17: validationCurve
# Chunk 18: test-validationCurve
lseq <- c(0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10)
errors <- validationCurve(polyFeatures(train$X, p = 8),
train$y,
polyFeatures(val$X, p = 8),
val$y,
lseq)
errors[, 1] <- 1:10 # for interpretability in the plot
plotLearningCurve(errors)
q1data <- read.table("../data/ex1data1.txt",
sep = ",",
col.names = c("population", "profit"))
q1data$ones <- 1
q1data <- q1data %>% select(ones, population, profit)
X <- select(q1data, -profit)
y <- q1data$profit
m <- length(y)
require(dplyr)
install.packages("dplyr")
require(dplyr)
q1data <- read.table("../data/ex1data1.txt",
sep = ",",
col.names = c("population", "profit"))
q1data$ones <- 1
q1data <- q1data %>% select(ones, population, profit)
X <- select(q1data, -profit)
y <- q1data$profit
m <- length(y)
theta <- rep(0, times = 2)
iterations <- 1500
alpha <- 0.01
pred <- theta %*% t(X)
source("ex1_chunks.R")
debug(computeCost)
temp <- computeCost(X, y, theta, lambda = 0)
jhist <- gradientDescent(X, y, theta, alpha, iterations)
?matrix
computeCost(matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, FALSE),
c(7, 6, 5, 4),
c(0.1, 0.2))
undebug(computeCost)
computeCost(matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, FALSE),
c(7, 6, 5, 4),
c(0.1, 0.2))
computeCost(matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE),
c(7, 6, 5, 4),
c(0.1, 0.2))
matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE)
?computeCost
source('~/coursera-ml-R/ex1/ex1_chunks.R')
c(0.1, 0.2)
c(7, 6, 5, 4)
matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE)
computeCost(matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE),
c(7, 6, 5, 4),
c(0.1, 0.2))
c(0.1,0.2,0.3)
c(7,6,5,4)
matrix(c(1, 2, 3, 1, 3, 4, 1, 4, 5, 1, 5, 6))
matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE)
matrix(c(1, 2, 3, 1, 3, 4, 1, 4, 5, 1, 5, 6), 4, 3, TRUE)
computeCost(matrix(c(1, 2, 3, 1, 3, 4, 1, 4, 5, 1, 5, 6), 4, 3, TRUE),
c(7,6,5,4),
c(0.1,0.2,0.3))
source('~/coursera-ml-R/ex5/ex5_chunks.R')
source('~/coursera-ml-R/ex1/ex1_chunks.R')
# Chunk 1: dependencies
require(ggplot2)
# Chunk 2: read-data
train <- read.csv("../data/ex5train.csv")
val <- read.csv("../data/ex5val.csv")
test <- read.csv("../data/ex5test.csv")
# Chunk 3: viz-train
g1 <- ggplot(data = train, aes(X, y)) +
geom_point(shape = 4, color = "red", size = 3) +
labs(title = "Figure 1: Training Data",
x = "Change in water level (X)",
y = "Water flowing out of the dam (y)")
g1
# Chunk 4: ex1_chunks
knitr::read_chunk('../ex1/ex1_chunks.R')
# Chunk 5: lin-reg-cost-func
# Chunk 6: gradient-check
computeCost(cbind(1, train$X), train$y, c(1,1))
# Chunk 7: ex5_chunks
knitr::read_chunk('ex5_chunks.R')
# Chunk 8: trainLinearReg
# Chunk 9: optim
learnedTheta <- trainLinearReg(cbind(1, train$X), train$y)
# Chunk 10: plot-learnedTheta
g1 + geom_abline(slope = learnedTheta$par[2], intercept = learnedTheta$par[1])
lm(y ~ X + 1, train)$coefficients
learnedTheta$par
# Chunk 11: learningCurve
# Chunk 12: plot-learning-curves
errors <- learningCurve(cbind(1, train$X), train$y, cbind(1, val$X), val$y)
g2 <- plotLearningCurve(errors)
g2
# Chunk 13: polyFeatures
# Chunk 14: featureNormalize
# Chunk 15: polyPlots
# Chunk 16
polyPlots(train$X, train$y, val$X, val$y, n = 12, lambda = 0, p = 8)
# Chunk 17: validationCurve
source('~/coursera-ml-R/ex5/ex5_chunks.R')
source('~/coursera-ml-R/ex1/ex1_chunks.R')
# Chunk 1: dependencies
require(ggplot2)
# Chunk 2: read-data
train <- read.csv("../data/ex5train.csv")
val <- read.csv("../data/ex5val.csv")
test <- read.csv("../data/ex5test.csv")
# Chunk 3: viz-train
g1 <- ggplot(data = train, aes(X, y)) +
geom_point(shape = 4, color = "red", size = 3) +
labs(title = "Figure 1: Training Data",
x = "Change in water level (X)",
y = "Water flowing out of the dam (y)")
g1
# Chunk 4: ex1_chunks
knitr::read_chunk('../ex1/ex1_chunks.R')
# Chunk 5: lin-reg-cost-func
# Chunk 6: gradient-check
computeCost(cbind(1, train$X), train$y, c(1,1))
# Chunk 7: ex5_chunks
knitr::read_chunk('ex5_chunks.R')
# Chunk 8: trainLinearReg
# Chunk 9: optim
learnedTheta <- trainLinearReg(cbind(1, train$X), train$y)
# Chunk 10: plot-learnedTheta
g1 + geom_abline(slope = learnedTheta$par[2], intercept = learnedTheta$par[1])
lm(y ~ X + 1, train)$coefficients
learnedTheta$par
# Chunk 11: learningCurve
# Chunk 12: plot-learning-curves
errors <- learningCurve(cbind(1, train$X), train$y, cbind(1, val$X), val$y)
g2 <- plotLearningCurve(errors)
g2
# Chunk 13: polyFeatures
# Chunk 14: featureNormalize
# Chunk 15: polyPlots
# Chunk 16
polyPlots(train$X, train$y, val$X, val$y, n = 12, lambda = 0, p = 8)
# Chunk 17: validationCurve
# Chunk 18: test-validationCurve
lseq <- c(0, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, 3, 10)
errors <- validationCurve(polyFeatures(train$X, p = 8),
train$y,
polyFeatures(val$X, p = 8),
val$y,
lseq)
errors[, 1] <- 1:10 # for interpretability in the plot
plotLearningCurve(errors)
source('~/coursera-ml-R/ex5/ex5_chunks.R')
source('~/coursera-ml-R/ex1/ex1_chunks.R')
X= c(1, 1, 1)
X <- cbind(X, matrix(c(8, 1, 6, 3, 5, 7, 4, 9, 2), 3, 3, TRUE))
y = c(7, 6, 5)
theta = c(0.1, 0.2, 0.3, 0.4)
computeCost(X, y, theta, 0)
computeCost(X, y, theta, 7)
X = c(1, 2, 3, 4)
y = 5
theta = c(0.1, 0.2, 0.3, 0.4)
computeCost(X, y, theta, 7)
train <- read.csv("../data/ex5train.csv")
val <- read.csv("../data/ex5val.csv")
test <- read.csv("../data/ex5test.csv")
g1 <- ggplot(data = train, aes(X, y)) +
geom_point(shape = 4, color = "red", size = 3) +
labs(title = "Figure 1: Training Data",
x = "Change in water level (X)",
y = "Water flowing out of the dam (y)")
g1
knitr::read_chunk('../ex1/ex1_chunks.R')
computeCost(cbind(1, train$X), train$y, c(1,1))
debug(computeCost)
computeCost(cbind(1, train$X), train$y, c(1,1))
is.null(dim(X))
m
pred
cost
reg
setwd("ex5")
source("ex5_chunks.R")
source("../ex1/ex1_chunks.R")
# Chunk 1
source("ex5_chunks.R")
source("../ex1/ex1_chunks.R")
# Chunk 2: dependencies
require(ggplot2)
# Chunk 3: read-data
train <- read.csv("../data/ex5train.csv")
val <- read.csv("../data/ex5val.csv")
test <- read.csv("../data/ex5test.csv")
# Chunk 4: viz-train
g1 <- ggplot(data = train, aes(X, y)) +
geom_point(shape = 4, color = "red", size = 3) +
labs(title = "Figure 1: Training Data",
x = "Change in water level (X)",
y = "Water flowing out of the dam (y)")
g1
# Chunk 5: ex1_chunks
knitr::read_chunk('../ex1/ex1_chunks.R')
# Chunk 6: lin-reg-cost-func
# Chunk 7: gradient-check
computeCost(cbind(1, train$X), train$y, c(1,1))
# Chunk 8: ex5_chunks
knitr::read_chunk('ex5_chunks.R')
# Chunk 9: trainLinearReg
# Chunk 10: optim
learnedTheta <- trainLinearReg(cbind(1, train$X), train$y)
# Chunk 11: plot-learnedTheta
g1 + geom_abline(slope = learnedTheta$par[2], intercept = learnedTheta$par[1])
lm(y ~ X + 1, train)$coefficients
learnedTheta$par
# Chunk 12: learningCurve
# Chunk 13: plot-learning-curves
errors <- learningCurve(cbind(1, train$X), train$y, cbind(1, val$X), val$y)
g2 <- plotLearningCurve(errors)
g2
# Chunk 14: polyFeatures
# Chunk 15: featureNormalize
# Chunk 16: polyPlots
# Chunk 17
polyPlots(train$X, train$y, val$X, val$y, n = 12, lambda = 0, p = 8)
# Chunk 18: validationCurve
require(ggplot2)
computeCost(matrix(c(1, 2, 1, 3, 1, 4, 1, 5), 4, 2, TRUE),
c(7, 6, 5, 4),
c(0.1, 0.2))
# 11.9450
computeCost(matrix(c(1, 2, 3, 1, 3, 4, 1, 4, 5, 1, 5, 6), 4, 3, TRUE),
c(7,6,5,4),
c(0.1,0.2,0.3))
# 7.0175
X = matrix(c(2, 1, 3, 7, 1, 9, 1, 8, 1, 3, 7, 4), 4, 3, TRUE)
X
c(0.4, 0.8, 0.8)
computeCost(matrix(c(2, 1, 3, 7, 1, 9, 1, 8, 1, 3, 7, 4), 4, 3, TRUE),
c(2, 5, 5, 6),
c(0.4, 0.8, 0.8))
setwd("ex5")
source('~/coursera-ml-R/ex1/ex1_chunks.R', echo=TRUE)
source('~/coursera-ml-R/ex5/ex5_chunks.R', echo=TRUE)
Sys.Date()
knit_with_parameters('~/coursera-ml-R/ex2/ex2_solutions.Rmd')
require(R.matlab)
install.packages("R.matlab")
ex3data1 <- readMat("data/ex3data1.mat")
require(R.matlab)
ex3data1 <- readMat("data/ex3data1.mat")
str(ex3data1)
?write.csv
write.csv(x = readMat("data/ex3data1.mat"),
file = "data/ex3data1.csv",
sep = ",")
write.csv(x = readMat("data/ex3data1.mat"), file = "data/ex3data1.csv")
source('~/coursera-ml-R/ex2/ex2_chunks.R')
source('~/coursera-ml-R/ex3/ex3_chunks.R')
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
setwd("~/coursera-ml-R/ex3")
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
thetas <- data.frame()
for(i in 1:10){
dfi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
}
str(ex3data1)
a <- readMat("../data/ex3data1.mat")
str(a)
ex3data1 <- readMat("data/ex3data1.mat")
write.csv(x = cbind(ex3data1$X, ex3data1$y), file = "data/ex3data1.csv")
setwd("~/coursera-ml-R")
ex3data1 <- readMat("data/ex3data1.mat")
write.csv(x = cbind(ex3data1$X, ex3data1$y), file = "data/ex3data1.csv")
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
setwd("ex2")
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
thetas <- data.frame()
str(ex3data1)
ex3data1 <- read.csv("../data/ex3data1.csv")
str(ex3data1)
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- read.csv("../data/ex3data1.csv")
ex3data1 <- cbind(1, ex3data1$X, ex3data1$y)
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
str(ex3data1)
ex3data1 <- readMat("../data/ex3data1.mat")
str(ex3data1)
a <- cbind(ex3data1$X, ex3data1$y)
str (a)
b <- read.csv("../ex3data1.csv")
b <- read.csv("../data/ex3data1.csv")
str(b)
?write.table
setwd("../ex3")
require(ggplot2)
ex3data1 <- read.csv("../data/ex3data1.csv")
str(ex3data1)
dim(ex3data1)
source('~/coursera-ml-R/ex2/ex2_chunks.R')
source('~/coursera-ml-R/ex3/ex3_chunks.R')
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
thetas <- data.frame()
for(i in 1:10){
dfi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
}
thetas <- data.frame()
for(i in 1:10){
dfi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
}
i = 1
thetas <- data.frame()
dfi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
str(dfi)
dim(dfi)
ex3data1[, 402] == i
dim(ex3data1)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
debug(costFunction)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
dfi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(dfi, x)$J},
gr = function(x){costFunction(dfi, x)$grad},
method = "BFGS", control = list(maxit = 400))
m
str(X)
dim(X)
dim(y)
length(y)
crossprod(c(y, 1 - y),
c(log(sig(X %*% theta)), log(1 - sig(X%*% theta))))
str(theta)
X %*% theta
as.matrix(X) %*% theta
?write.csv
setwd("../")
ex3data1 <- readMat("data/ex3data1.mat")
write.csv(x = cbind(ex3data1$X, ex3data1$y),
file = "data/ex3data1.csv",
row.names = FALSE,
col.names = FALSE)
ex3data1 <- readMat("data/ex3data1.mat")
write.csv(x = cbind(ex3data1$X, ex3data1$y),
file = "data/ex3data1.csv",
row.names = FALSE)
setwd("~/coursera-ml-R/ex3")
?read.csv
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
# Chunk 2
ex3data1 <- as.matrix(read.csv("../data/ex3data1.csv"))
initial_theta <- rep(0, times = ncol(ex3data1) - 1)
# Chunk 3: read_chunks
read_chunk("../ex2/ex2_chunks.R")
# Chunk 4: sig
# Chunk 5: h
# Chunk 6: costFunction
source('~/coursera-ml-R/ex2/ex2_chunks.R')
thetas <- data.frame()
for(i in 1:10){
Mi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
thetai <- optim(par = initial_theta,
fn = function(x){costFunction(Mi, x)$J},
gr = function(x){costFunction(Mi, x)$grad},
method = "BFGS", control = list(maxit = 400))
thetas <- rbind(thetas, thetai$par)
}
i=1
thetas <- data.frame()
Mi <- cbind(ex3data1[, 1:401], ex3data1[, 402] == i)
str(ex3data1)
