# propagateForward(ex4data1$X[1, ], Thetas <- ex4weights)
computeCost(unlist(ex4weights), unlist(ex4data1$X), newy)
computeCost(unlist(ex4weights), unlist(ex4data1$X), newy, 1)
sigmoidGradient <- function(z){
sig(z) * (1 - sig(z))
}
genRandThetas <- function(epsilon_init = 0.12){
t1 <- matrix(runif(hidden_layer_size * (input_layer_size+1), -1),
hidden_layer_size,
input_layer_size + 1)
t2 <- matrix(runif(output_layer_size * (hidden_layer_size+1)),
output_layer_size,
hidden_layer_size+1)
return(list(Theta1 = t1 * epsilon_init, Theta2 = t2 * epsilon_init))
}
backPropagate <- function(mythetas_flattened, myX_flattened, myy, mylambda = 0){
# First unroll the parameters
mythetas <- reshapeParams(mythetas_flattened)
# Now unroll X
myX <- reshapeX(myX_flattened)
Delta1 = matrix(0, hidden_layer_size,input_layer_size+1)
Delta2 = matrix(0, output_layer_size,hidden_layer_size+1)
m = n_training_samples
# irow <- 1
for(irow in 1:m){
myrow <- myX[irow,]
a1 <- myrow
# propagateForward returns (zs, activations) for each layer excluding the input layer
temp = propagateForward(myrow,mythetas)
z2 = temp[[1]][,1]
a2 = temp[[1]][,2]
z3 = temp[[2]][,1]
a3 = temp[[2]][,2]
tmpy <- myy[irow, ]
delta3 = a3 - tmpy
delta2 <- (t(mythetas[[2]])[-1,] %*% delta3) * sigmoidGradient(z2)
a2 <- c(1,a2)
Delta1 <- Delta1 + delta2 %*% t(a1)
Delta2 <- Delta2 + delta3 %*% t(a2)
}
D1 <- Delta1 / m
D2 <- Delta2 / m
#Regularization:
D1[, -1] <- D1[, -1] + (mylambda / m) * mythetas[[1]][,-1]
D2[, -1] <- D2[, -1] + (mylambda / m) * mythetas[[2]][,-1]
return(unlist(list(D1, D2)))
}
#Actually compute D matrices for the Thetas provided
flattenedD1D2 = backPropagate(unlist(ex4weights),
unlist(ex4data1$X),
ex4data1$y,
mylambda = 0)
deltas <- reshapeParams(flattenedD1D2)
checkGradient <- function(mythetas,myDs,myX,myy,mylambda=0){
myeps <- 0.0001
flattened <- unlist(mythetas)
flattenedDs <- unlist(myDs)
myX_flattened <- unlist(myX)
n_elems <- length(flattened)
# Pick ten random elements, compute numerical gradient, compare to respective D's
for(i in 1:10){
x <- as.integer(runif(1) * n_elems)
epsvec <- rep(0, times = n_elems)
epsvec[x] <- myeps
cost_high <- computeCost(flattened + epsvec,myX_flattened,myy,mylambda)
cost_low <- computeCost(flattened - epsvec,myX_flattened,myy,mylambda)
mygrad <- (cost_high - cost_low) / (2*myeps)
return(list(element = x, num.grad = mygrad, backprop.grad = flattenedDs[x]))
}
}
checkGradient(ex4weights, deltas, ex4data1$X, newy)
## Learn parameters with optim()
trainNN <- function(mylambda=0, it = 50){
randomThetas_unrolled <- unlist(genRandThetas())
result <- optim(par = randomThetas_unrolled,
fn = function(x){computeCost(x, unlist(ex4data1$X), newy)},
gr = function(x)(backPropagate(x, unlist(ex4data1$X), newy)),
method = "BFGS", control = list(maxit = it))
}
start_time <- Sys.time()
learned_Thetas <- trainNN()
print(Sys.time() - start_time)
predictNN <- function(row,Thetas){
}
NNpred <- function(myX,myThetas,myy){ #takes vector of ys
apply(myX, 1, function(x){
which.max(propagateForward(x, myThetas)[[2]][,2])
})
}
pred <- NNpred(ex4data1$X, reshapeParams(learned_Thetas$par), ex4data1$y)
sum(pred==ex4data1$y) / length(pred)
source("ex2/ex2_chunks.R")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- readMat("data/ex3data1.csv")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- cbind(1, read.csv("data/ex3data1.csv"))
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1$y == i)
}
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- cbind(1, read.csv("data/ex3data1.csv"))
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1$y == i)
}
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- cbind(1, as.matrix(read.csv("data/ex3data1.csv")))
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1$y == i)
}
head(colnames(ex3data1))
ex3data1[1:6, 1:6]
head(ex3data1$V1)
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- cbind(X0 = 1, as.matrix(read.csv("data/ex3data1.csv")))
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- cbind(1, as.matrix(read.csv("data/ex3data1.csv")))
paste("X", 1:50)
paste(X, seq_along(ex3data1), sep = "")
paste("X", seq_along(ex3data1), sep = "")
paste("X", 1:ncol(ex3data1), sep = "")
system.time()
system.time(paste("X", 1:ncol(ex3data1), sep = ""))
system.time()
?system.time
paste("X", 1:ncol(ex3data1), sep = "")
start.time <- proc.time()
paste("X", 1:ncol(ex3data1), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", seq_along(ex3data1), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", 1:ncol(ex3data1), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", seq_len(ex3data1), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", 1:ncol(ex3data1), sep = "")
proc.time() - start.time
temp
start.time <- proc.time()
temp <- paste("X", seq_len(ex3data1), sep = "")
proc.time() - start.time
seq_len(ex3data1)
time.test <- matrix(rnorm(m*n), m, n)
n <- 10000
m <- 10000
time.test <- matrix(rnorm(m*n), m, n)
start.time <- proc.time()
temp <- paste("X", 1:ncol(time.test), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", seq(ncol(time.test)), sep = "")
proc.time() - start.time
temp
n <- 10000
m <- 10000
time.test <- matrix(rnorm(m*n), m, n)
start.time <- proc.time()
temp <- paste("X", 1:ncol(time.test), sep = "")
proc.time() - start.time
start.time <- proc.time()
temp <- paste("X", seq(ncol(time.test)), sep = "")
proc.time() - start.time
paste("X", seq(ncol(ex3data1)), sep = "")
num <- seq(ncol(ex3data1))
paste("X", nums, sep = "")
nums <- seq(ncol(ex3data1))
paste("X", nums, sep = "")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
paste("X", seq(ncol(ex3data1)), sep = "")
?setnames
require(data.table)
?setnames
require(data.table)
?dplyr::rename
require(knitr)
require(data.table)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
setnames(ex3data1, paste("X", seq(ncol(ex3data1)), sep = ""))
colnames(ex3data1[, ncol(ex3data1)]) <- "Y"
names(ex3data1[, ncol(ex3data1)]) <- "Y"
ex3data1[, "Y"]
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
names(ex3data1[, ncol(ex3data1)]) <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
colnames(ex3data1)
head(names(ex3data1[, ncol(ex3data1)]))
names(ex3data1[, ncol(ex3data1)])
ex3data1[, ncol(ex3data1)]
require(dplyr)
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(1-ncol(ex3data1)), "Y" sep = "")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(1-ncol(ex3data1)), "Y", sep = "")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(1-ncol(ex3data1)), sep = "")
require(knitr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
ex3data1 <- cbind(X0 = 1, ex3data1)
require(dplyr)
colnames(ex3data1)
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
ex3data1 %<>%
cbind(X0 = 1, ex3data1) %>%
rename(Y = X401)
colnames(ex3data1)[ncol(ex3data1)]
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 cbind(X0 = 1, ex3data1)
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
colnames(ex3data1)
ex3data1[, "X01"]
ex3data1[, "X1"]
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- readMat("data/ex3weights.mat")
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
ex3weights <- list(Theta1 = read.csv("data/ex3weights_Theta1.csv"),
Theta2 = read.csv("data/ex3weights_Theta2.csv"))
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
?readMat
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1$X), newy)
colnames(ex3data1)
head(select(ex3data1, starts_with("X")))
head(ex3data1[, "X"])
dim(ex3data1)
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1$X), newy)
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1$X), newy)
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
source('C:/Users/Jai/coursera-ml-R/ex2/ex2_chunks.R')
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy, 1)
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy, 1)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1$X),
ex3data1$y,
mylambda = 0)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
ex3data1[, ncol(ex3data1)],
mylambda = 0)
head(ex3data1[, ncol(ex3data1)])
debug(backPropagate)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
ex3data1[, ncol(ex3data1)],
mylambda = 0)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
ex3data1[, ncol(ex3data1)],
mylambda = 0)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
ex3data1[, ncol(ex3data1)],
mylambda = 0)
irow
str( ex3data1[, ncol(ex3data1)])
str(a3)
a3
myy[irow]
deltas <- reshapeParams(flattenedD1D2)
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy, 1)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
newy,#ex3data1[, ncol(ex3data1)],
mylambda = 0)
deltas <- reshapeParams(flattenedD1D2)
checkGradient(ex3weights, deltas, ex3data1[, 1:401], newy)
source('C:/Users/Jai/coursera-ml-R/ex4/ex4_chunks.R')
source("ex4/ex4_chunks.R")
require(knitr)
require(dplyr)
read_chunk("ex2/ex2_chunks.R")
read_chunk("ex4/ex4_chunks.R")
set.seed(1234)
ex3data1 <- as.matrix(read.csv("data/ex3data1.csv"))
colnames(ex3data1) <- paste("X", seq(ncol(ex3data1)), sep = "")
colnames(ex3data1)[ncol(ex3data1)] <- "Y"
ex3data1 <- cbind(X0 = 1, ex3data1)
newy <- vector()
for(i in 1:10){
newy <- cbind(newy, ex3data1[, "Y"] == i)
}
ex3weights <- list(Theta1 = as.matrix(read.csv("data/ex3weights_Theta1.csv")),
Theta2 = as.matrix(read.csv("data/ex3weights_Theta2.csv")))
input_layer_size <- 400
hidden_layer_size <- 25
output_layer_size <- 10
n_training_samples <- 5000
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
source("ex2/ex2_chunks.R")
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy)
computeCost(unlist(ex3weights), unlist(ex3data1[, 1:401]), newy, 1)
#Actually compute D matrices for the Thetas provided
flattenedD1D2 <- backPropagate(unlist(ex3weights),
unlist(ex3data1[, 1:401]),
newy,#ex3data1[, ncol(ex3data1)],
mylambda = 0)
deltas <- reshapeParams(flattenedD1D2)
checkGradient(ex3weights, deltas, ex3data1[, 1:401], newy)
start_time <- Sys.time()
learned_Thetas <- trainNN()
print(Sys.time() - start_time)
pred <- NNpred(ex3data1$X, reshapeParams(learned_Thetas$par), ex3data1$y)
pred <- NNpred(ex3data1$X,
reshapeParams(learned_Thetas$par),
ex3data1[, ncol(ex3data1)])
pred <- NNpred(ex3data1[, 1:401],
reshapeParams(learned_Thetas$par),
ex3data1[, ncol(ex3data1)])
sum(pred==ex3data1$y) / length(pred)
pred <- NNpred(ex3data1[, 1:401],
reshapeParams(learned_Thetas$par),
ex3data1[, ncol(ex3data1)])
sum(pred== ex3data1[, ncol(ex3data1)]) / length(pred)
author("mydeck")
require(slidify)
install.packages("slidify")
require(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
require(slidify)
warnings()
