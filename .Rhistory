ex3weights <- readMat("data/ex3weights.mat")
write.csv(x = ex3weights$Theta1,
file = "data/exweights_Theta1.csv",
row.names = FALSE)
write.csv(x = ex3weights$Theta2,
file = "data/exweights_Theta2.csv",
row.names = FALSE))
ex3weights <- readMat("data/ex3weights.mat")
write.csv(x = ex3weights$Theta1,
file = "data/exweights_Theta1.csv",
row.names = FALSE)
write.csv(x = ex3weights$Theta2,
file = "data/exweights_Theta2.csv",
row.names = FALSE)
setwd("ex3")
ex3weights <- readMat("data/ex3weights.mat")
write.csv(x = ex3weights$Theta1,
file = "data/ex3weights_Theta1.csv",
row.names = FALSE)
write.csv(x = ex3weights$Theta2,
file = "data/ex3weights_Theta2.csv",
row.names = FALSE)
setwd("../")
ex3weights <- readMat("data/ex3weights.mat")
write.csv(x = ex3weights$Theta1,
file = "data/ex3weights_Theta1.csv",
row.names = FALSE)
write.csv(x = ex3weights$Theta2,
file = "data/ex3weights_Theta2.csv",
row.names = FALSE)
setwd("ex3")
ex3pred1 <- apply(ex3data1, 1, FUN = function(x){
which.max(as.vector(apply(thetas, 1, FUN = function(y){
h(y, x[1:401])
})))
})
sum(ex3data1[, 402] == ex3pred1) / nrow(ex3data1)
# This is a higher than the Matlab script
Theta1 <- read.csv("../data/ex3weights_Theta1.csv")
Theta2 <- read.csv("../data/ex3weights_Theta2.csv")
z2 <- Theta1 %*% t(ex3data1[, 1:401])
a2 <- sig(z2)
a2 <- rbind(1, a2)
z3 <- Theta2 %*% a2
a3 <- sig(z3)
ex3pred2 <- apply(a3, 2, which.max)
sum(ex3data1[, 402] == ex3pred2) / nrow(ex3data1)
ex3pred1 <- apply(ex3data1, 1, FUN = function(x){
which.max(as.vector(apply(thetas, 1, FUN = function(y){
h(y, x[1:401])
})))
})
sum(ex3data1[, 402] == ex3pred1) / nrow(ex3data1)
# This is a higher than the Matlab script
Theta1 <- as.matrix(read.csv("../data/ex3weights_Theta1.csv"))
Theta2 <- as.matrix(read.csv("../data/ex3weights_Theta2.csv"))
z2 <- Theta1 %*% t(ex3data1[, 1:401])
a2 <- sig(z2)
a2 <- rbind(1, a2)
z3 <- Theta2 %*% a2
a3 <- sig(z3)
ex3pred2 <- apply(a3, 2, which.max)
sum(ex3data1[, 402] == ex3pred2) / nrow(ex3data1)
setwd("../ex2")
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- read.table("../data/ex2data1.txt", sep = ",")
ex2data1 <- cbind(1, ex2data1)
colnames(ex2data1) <- c("x0", "x1", "x2", "y")
initial_theta <- rep(0, times = 3)
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- as.matrix(read.table("../data/ex2data1.txt", sep = ","))
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
ex2data2 <- read.table("../data/ex2data2.txt", sep = ",")
ggplot(ex2data2, aes(V1, V2)) + geom_point(aes(shape = as.factor(V3), color = as.factor(V3)))
y <- ex2data2$V3
x1s <- ex2data2[, 1]
x2s <- ex2data2[, 2]
for(i in 2:6){
x1s <- cbind(x1s, ex2data2[,1] ^ i)
}
x1s <- cbind(1, x1s)
for(i in 2:6){
x2s <- cbind(x2s, ex2data2[,1] ^ i)
}
x2s <- cbind(1, x2s)
allxs <- vector()
## We only want up to 6 degree polynomials, so this gives us too many
for(i in 1:ncol(x2s)){
allxs <- cbind(allxs, x1s[, 1:(8-i)] * x2s[,i])
}
ex2data2.full <- cbind(allxs, y)
initial_theta <- rep(0, times = 28)
a <-costFunction(ex2data2.full, initial_theta)
source('~/coursera-ml-R/ex2/ex2_chunks.R')
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
ex2data2 <- read.table("../data/ex2data2.txt", sep = ",")
ggplot(ex2data2, aes(V1, V2)) + geom_point(aes(shape = as.factor(V3), color = as.factor(V3)))
y <- ex2data2$V3
x1s <- ex2data2[, 1]
x2s <- ex2data2[, 2]
for(i in 2:6){
x1s <- cbind(x1s, ex2data2[,1] ^ i)
}
x1s <- cbind(1, x1s)
for(i in 2:6){
x2s <- cbind(x2s, ex2data2[,1] ^ i)
}
x2s <- cbind(1, x2s)
allxs <- vector()
## We only want up to 6 degree polynomials, so this gives us too many
for(i in 1:ncol(x2s)){
allxs <- cbind(allxs, x1s[, 1:(8-i)] * x2s[,i])
}
ex2data2.full <- cbind(allxs, y)
initial_theta <- rep(0, times = 28)
a <-costFunction(ex2data2.full, initial_theta)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
debug(costFunction)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
m
str(M)
str(X)
str(theta)
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- as.matrix(read.table("../data/ex2data1.txt", sep = ","))
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- as.matrix(read.table("../data/ex2data1.txt", sep = ","))
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- as.matrix(read.table("../data/ex2data1.txt", sep = ","))
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
str(theta)
str(X)
str(X %*% theta)
undebug(costFunction)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
debug(costFunction)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$gradient},
method = "BFGS", control = list(maxit = 400))
J
grad
list(J = as.vector(J), grad = as.vector(grad))
undebug(costFunction)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$grad},
method = "BFGS", control = list(maxit = 400))
ex2data2 <- read.table("../data/ex2data2.txt", sep = ",")
ggplot(ex2data2, aes(V1, V2)) + geom_point(aes(shape = as.factor(V3), color = as.factor(V3)))
y <- ex2data2$V3
x1s <- ex2data2[, 1]
x2s <- ex2data2[, 2]
for(i in 2:6){
x1s <- cbind(x1s, ex2data2[,1] ^ i)
}
x1s <- cbind(1, x1s)
for(i in 2:6){
x2s <- cbind(x2s, ex2data2[,1] ^ i)
}
x2s <- cbind(1, x2s)
allxs <- vector()
## We only want up to 6 degree polynomials, so this gives us too many
for(i in 1:ncol(x2s)){
allxs <- cbind(allxs, x1s[, 1:(8-i)] * x2s[,i])
}
ex2data2.full <- cbind(allxs, y)
initial_theta <- rep(0, times = 28)
a <-costFunction(ex2data2.full, initial_theta)
a
source('~/coursera-ml-R/ex2/ex2_chunks.R')
?aes
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- as.matrix(read.table("../data/ex2data1.txt", sep = ","))
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
str(ex2data1)
g1 <- ggplot(ex2data1, aes(x = v2, y = v3, color = v4))
ex2data1 <- read.table("../data/ex2data1.txt", sep = ",")
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
```
```{r vizualize-data}
g1 <- ggplot(ex2data1, aes(x = v2, y = v3, color = v4))
g1
head(ex2data1)
g1 <- ggplot(ex2data1, aes(x = V1, y = V2, color = V3))
g1
g1 <- ggplot(ex2data1, aes(x = V1, y = V2, color = as.factor(V3))) +
geom_point()
g1
source('~/coursera-ml-R/ex2/ex2_chunks.R')
g1 <- ggplot(ex2data1,
aes(x = V1, y = V2, color = as.factor(V3), shape = as.factor(V3))) +
geom_point()
g1
# Chunk 1: dependencies
require(ggplot2)
require(knitr)
# Chunk 2: read-data
ex2data1 <- read.table("../data/ex2data1.txt", sep = ",")
ex2data1 <- cbind(1, ex2data1)
initial_theta <- rep(0, times = 3)
# Chunk 3: vizualize-data
g1 <- ggplot(ex2data1,
aes(x = V1, y = V2, color = as.factor(V3), shape = as.factor(V3))) +
geom_point()
g1
# Chunk 4: read_chunks
read_chunk("ex2_chunks.R")
# Chunk 5: sig
# Chunk 6: h
# Chunk 7: costFunction
debug(costFunction)
newTheta <- optim(par = initial_theta,
fn = function(x){costFunction(ex2data1, x)$J},
gr = function(x){costFunction(ex2data1, x)$grad},
method = "BFGS", control = list(maxit = 400))
str(M)
setwd("../ex6")
setwd("../")
require(R.matlab)
ex6data1 <- readMat("data/ex6data/ex6data1")
ex6data1 <- readMat("data/ex6data/ex6data1.mat")
ex6data2 <- readMat("data/ex6data/ex6data2.mat")
ex6data3 <- readMat("data/ex6data/ex6data3.mat")
str(ex6data1)
str(ex6data2)
str(ex6data3)
write.csv(x = cbind(ex6data1$X, ex6data1$y),
file = "data/ex6data/ex6data1.csv",
row.names = FALSE)
ex6data1 <- readMat("data/ex6data/ex6data1.mat")
write.csv(x = cbind(ex6data1$X, ex6data1$y),
file = "data/ex6data/ex6data1.csv",
row.names = FALSE)
ex6data2 <- readMat("data/ex6data/ex6data2.mat")
write.csv(x = cbind(ex6data2$X, ex6data2$y),
file = "data/ex6data/ex6data2.csv",
row.names = FALSE)
ex6data3 <- readMat("data/ex6data/ex6data3.mat")
write.csv(x = cbind(ex6data3$X, ex6data3$y),
file = "data/ex6data/ex6data3_train.csv",
row.names = FALSE)
write.csv(x = cbind(ex6data3$Xval, ex6data3$yval),
file = "data/ex6data/ex6data3_val.csv",
row.names = FALSE)
spamTrain <- readMat("data/ex6data/spamTrain.mat")
write.csv(x = cbind(spamTrain$X, spamTrain$y),
file = "data/ex6data/spamTrain.csv",
row.names = FALSE)
spamTest <- readMat("data/ex6data/spamTest.mat")
write.csv(x = cbind(spamTest$X, spamTest$y),
file = "data/ex6data/spamTest.csv",
row.names = FALSE)
require(knitr)
setwd("ex6")
"abcd"
ex6data1 <- read.csv("../data/ex6data/ex6data1.csv")
str(ex6data1)
summary(ex6data1$V3)
g1 <- ggplot(data = ex6data1, aes(V1, V2, color = V3, shape = V3)) +
geom_point()
g1
ex6data1$V3 <- as.factor(ex6data1$V3)
g1 <- ggplot(data = ex6data1, aes(V1, V2, color = V3, shape = V3)) +
geom_point()
g1
install.packages("kernlab")
require(kernlab)
?as.kernelMatrix
attach(ex6data1)
lm(V3 ~ V1 + V2)
?ksvm
linSvm1 <- ksvm(ex6data1[, 1:2], ex6data1[, 3], kernel = "vanilladot")
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot")
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", C=100)
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", C=100, type = "C-svc")
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot")
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = NULL)
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = list())
str(ex6data1)
sum(is.na(ex6data1))
sum(is.null(ex6data1))
attach(ex6data1)
linSvm1 <- ksvm(V3 ~ V1 + V2, kernel = "vanilladot", kpar = list())
detach(ex6data1)
ex6data1 <- as.matrix(ex6data1)
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = list())
str(ex6data1)
head(ex6data1)
ex6data1 <- as.numeric(as.matrix(ex6data1))
head(ex6data1)
ex6data1 <- read.csv("../data/ex6data/ex6data1.csv")
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
head(ex6data1)
str(ex6data1)
ex6data1$V3 <- as.factor(ex6data1$V3)
ex6data1[, 3] <- as.factor(ex6data1$V3)
ex6data1[, 3] <- as.factor(ex6data1[, 3])
str(ex6data1)
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
str(ex6data1)
ex6data1[, 3] <- as.factor(ex6data1[, 3])
str(ex6data1)
head(ex6data1)
g1 <- ggplot(data = ex6data1, aes(V1, V2, color = V3, shape = V3)) +
geom_point()
g1
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = list())
linSvm1
# Chunk 1: dependencies
require(knitr)
requre(ggplot2)
require(kernlab)
# Chunk 2: read-data
ex6data1 <- read.csv("../data/ex6data/ex6data1.csv")
ex6data1[, 3] <- as.factor(ex6data1[, 3])
# Chunk 3: explore-data1
g1 <- ggplot(data = ex6data1, aes(V1, V2, color = V3, shape = V3)) +
geom_point()
g1
ex6data1 <- as.matrix(ex6data1)
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = list())
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
ex6data1[, 3] <- as.factor(ex6data1[, 3])
linSvm1 <- ksvm(x = ex6data1[, 1:2], y = ex6data1[, 3], kernel = "vanilladot", kpar = list())
str(linSvm1)
linSvm1
linSvm1 <- ksvm(x = ex6data1[, 1:2],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list())
linSvm1
plot(linSvm1, data = ex6data1[, 1:2])
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
ex6data1[, 3] <- as.factor(ex6data1[, 3])
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
ex6data1[, 3] <- as.factor(ex6data1[, 3])
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
attributes((linSvm1))
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list(C = 1))
plot(linSvm1, data = ex6data1[, 2:1])
?kpar
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list()
plot(linSvm1, data = ex6data1[, 2:1])
ex6data1[, 3] <- as.factor(ex6data1[, 3])
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
?ksvm
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
C = 1
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
C = 1,
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
linSvm10 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
C = 10,
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm10, data = ex6data1[, 2:1])
linSvm100 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm100, data = ex6data1[, 2:1])
source('~/coursera-ml-R/ex6/ex6_chunks.R')
?read_chunk
read_chunk("ex6_chunks.R")
setwd("ex6")
gk(ex6data1[1, 1:2], ex6data1[2, 1:2], 0.03)
alspha(linSvm1)
alpha(linSvm1)
attributes(linSvm1)
dim(ex6data1)
?ksvm
1/51
linSvm1
summary(linSvm1)
?ksvm
cross(linSvm1)
# Chunk 1: dependencies
require(knitr)
require(ggplot2)
require(kernlab)
# Chunk 2: read-data
ex6data1 <- read.csv("../data/ex6data/ex6data1.csv")
ex6data1[, 3] <- as.factor(ex6data1[, 3])
# Chunk 3: explore-data1
g1 <- ggplot(data = ex6data1, aes(V1, V2, color = V3, shape = V3)) +
geom_point()
g1
# Chunk 4
ex6data1 <- as.matrix(read.csv("../data/ex6data/ex6data1.csv"))
ex6data1[, 3] <- as.factor(ex6data1[, 3])
linSvm1 <- ksvm(x = ex6data1[, 2:1],
y = ex6data1[, 3],
C = 1,
type = "C-svc",
kernel = "vanilladot",
kpar = list())
plot(linSvm1, data = ex6data1[, 2:1])
alpha(linSvm1)
alphaindex(linSvm1)
prob.model(linSvm1)
vanilladot(ex6data1[1, 1:2], ex6data1[51, 1:2])
str(vanilladot)
?vanilladot
gk(ex6data1[1, 1:2], ex6data1[2, 1:2], 0.1)
rbfdot(ex6data1[1, 1:2], ex6data1[51, 1:2], 0.1)
gk(ex6data1[1, 1:2], ex6data1[51, 1:2], 0.1)
rbf <- rbfdot(0.1)
rbf(ex6data1[1, 1:2], ex6data1[51, 1:2])
rbf
source('~/coursera-ml-R/ex6/ex6_chunks.R')
gk(ex6data1[1, 1:2], ex6data1[51, 1:2], 0.1)
rbf <- rbfdot(0.1)
rbf(ex6data1[1, 1:2], ex6data1[51, 1:2])
a <- c(1, 2, 3)
a^2
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(gk)
rbf <- rbfdot(0.1)
rbf(ex6data1[1, 1:2], ex6data1[51, 1:2])
gk(ex6data1[1, 1:2], ex6data1[51, 1:2], 0.1)
normSquared
(Xi - Xj)
(Xi - Xj) ^ 2
exp(-normSquared / (2 * sigma ^ 2))
source('~/coursera-ml-R/ex6/ex6_chunks.R')
?exp
?rbfdot
