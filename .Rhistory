C = 10,
type = "C-svc",
kernel = "rbfdot"",
kpar = list(sigma = 1),
scaled = F)
rbfSvm
rbfSvm <- ksvm(V3 ~ V1 + V2,
data = ex6data2,
C = 10,
type = "C-svc",
kernel = "rbfdot",
kpar = list(sigma = 1),
scaled = F)
rbfSvm
undebug(rbfdot)
undebug(ksvm)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
gkSvm <- ksvm(V3 ~ V1 + V2,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = gkGenerator,
kpar = list(sigma = 0.1),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
ex6data2 <- ex6data2[, c(2, 1, 3)]
gkSvm <- ksvm(V3 ~ V2 + V1,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = gkGenerator,
kpar = list(sigma = 0.1),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
gkSvm <- ksvm(V3 ~ V2 + V1,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = "rbfdot",
kpar = list(sigma = sigTransform(0.1)),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
gkSvm <- ksvm(V3 ~ V2 + V1,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = "rbfdot",
kpar = list(sigma = 0.1),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
gkSvm <- ksvm(V3 ~ V2 + V1,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = "rbfdot",
kpar = list(sigma = sigTransform(0.1)),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
gkSvm <- ksvm(V3 ~ V2 + V1,
data = ex6data2,
C = 1,
type = "C-svc",
kernel = gkGenerator,
kpar = list(sigma = sigTransform(0.1)),
scaled = F)
gkSvm
plot(gkSvm, data = as.data.frame(ex6data2))
sigTransform(0.1)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
ex6data3 <- as.matrix(read.csv("../data/ex6data/ex6data3.csv"))
ex6data3_train <- as.matrix(read.csv("../data/ex6data/ex6data3_train.csv"))
# ex6data3 <- ex6data2[, c(2, 1, 3)]
ex6data3_test <- as.matrix(read.csv("../data/ex6data/ex6data3_test.csv"))
ex6data3_val <- as.matrix(read.csv("../data/ex6data/ex6data3_val.csv"))
g4 <- ggplot(as.data.frame(ex6data3_train), aes(V1, V2, shape = as.factor(V3)))
g4
g4 <- ggplot(as.data.frame(ex6data3_train), aes(V1, V2, shape = as.factor(V3)))+
geom_point()
g4
g4 <- ggplot(as.data.frame(ex6data3_train), aes(V1,
V2,
shape = as.factor(V3),
color = as.factor(V3))) +
geom_point()
g4
g4 <- ggplot(aes = aes(V1,
V2,
shape = as.factor(V3),
color = as.factor(V3)),
data = as.data.frame(ex6data3_train)) +
geom_point()
g4
g4 <- ggplot(as.data.frame(ex6data3_train), aes(V1, V2, shape = as.factor(V3),
color = as.factor(V3))) +
geom_point()
g4
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params <- data.frame
for(i in v){
for(j in v){
rbind(c(i, j))
}
params
params <- data.frame()
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params <- data.frame()
for(i in v){
for(j in v){
rbind(c(i, j))
}
params
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params <- data.frame()
for(i in v){
for(j in v){
rbind(params, c(i, j))
}
params
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params <- data.frame()
for(i in v){
for(j in v){
params <- rbind(params, c(i, j))
}
params
g4
rm(params)
rm(paramPerformace)
paramPerformance <- data.frame()
colnames(paramPerformance) <- c("C", "sigma", "train accuracy", "val accuracy")
gkSvm
str(gkSvm)
error(gkSvm)
?predict
ex3pred <- predict(ex3svm, ex6data3_val)
ex3pred <- predict(gkSvm, ex6data3_val)
ex3pred <- predict.ksvm(gkSvm, ex6data3_val)
?predict.ksvm
require(kernlab)
testpred <- predict.ksvm(gkSvm, ex6data3_val)
testpred <- predict(gkSvm, ex6data3_val)
testpred <- predict(gkSvm, ex6data2)
testpred <- predict(gkSvm, ex6data2[, c(2,1,3)])
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(testParams)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
ex3svm
pred <- predict(ex3svm, val)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
debug(testParams)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(testParams)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
paramPerformance
source('~/coursera-ml-R/ex6/ex6_chunks.R')
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
params3[which.min(params3$`val error`),]
source('~/coursera-ml-R/ex6/ex6_chunks.R')
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
params3[which.min(params3$val.error),]
source('~/coursera-ml-R/ex6/ex6_chunks.R')
params3[which.min(params3$train.error),]
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
params3[which.min(params3$val.error),]
params3[which.min(params3$train.error),]
?arrange
require(dplyr)
?arrange
arrange(params3, desc(val.error))
arrange(params3, train.error)
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
min.val.error <- params3[which.min(params3$val.error),]
svm3 <- ksvm(V3 ~ .,
data = ex6data3_train,
C = min.val.error$C,
type = "C-svc",
kernel = gkGenerator,
kpar = list(sigma = sigTransform(min.val.error$sigma)))
svm3
plot(svm3, data = as.data.frame(ex6data3_train))
v <- c(0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30)
params3 <- testParams(ex6data3_train, ex6data3_val, v, v)
min.val.error <- params3[which.min(params3$val.error),]
svm3 <- ksvm(V3 ~ V2 + V1,
data = ex6data3_train,
C = min.val.error$C,
type = "C-svc",
kernel = gkGenerator,
kpar = list(sigma = sigTransform(min.val.error$sigma)))
plot(svm3, data = as.data.frame(ex6data3_train))
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope,
color = 3, show_guide=TRUE)
g3
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope,
color = 3, show.legend=TRUE)
g3
?show.legend
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt, slope = bound1$slope,
color = 2, show.legend=TRUE)
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope,
color = 3, show.legend=TRUE)
g3
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt, slope = bound1$slope, color = 2)
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope, color = 3) +
guides(shape = guide_legend(override.aes = list(linetype = 0)))
g3
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt, slope = bound1$slope, color = 2)
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope, color = 3) +
guides(shape = guide_legend(override.aes = list(linetype = 1)))
g3
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope,
color = 3, show.legend = TRUE) +
guides(shape = guide_legend(override.aes = list(linetype = 1)))
g3
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt, slope = bound1$slope, color = 2, show.legend = TRUE)
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt, slope = bound2$slope,
color = 3, show.legend = TRUE) +
guides(shape = guide_legend(override.aes = list(linetype = 1)))
g3
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, color = "1")
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "100")
g3
g3 <- g2 +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "100") +
scale_colour_discrete("")
g3
g1 + geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, color = "1") +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "100") +
scale_colour_discrete("")
ggplot(data = as.data.frame(ex6data1), aes(V1, V2)) + #, shape = as.factor(V3)
geom_point() +
geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, color = "1") +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "100") +
scale_colour_discrete("")
ggplot(data = as.data.frame(ex6data1), aes(V1, V2)) + #, shape = as.factor(V3)
geom_point() +
geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, color = "c=1") +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "c=100") +
scale_colour_discrete("")
ggplot(data = as.data.frame(ex6data1), aes(V1, V2)) + #, shape = as.factor(V3)
geom_point() +
geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, color = "abcd") +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, color = "xyz") +
scale_colour_discrete("")
bound1 <- decisionBoundary(linSvm1)
g2 <- g1 + geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, aes(color = "c=1"))
g2
linSvm2 <- ksvm(V3 ~ V2 + V1,
data = ex6data1,
C = 100,
type = "C-svc",
kernel = "vanilladot",
kpar = list(),
scaled = F)
bound2 <- decisionBoundary(linSvm2)
g3 <- g2 +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, aes(color = "c=100")) +
scale_colour_discrete("")
g3
ggplot(data = as.data.frame(ex6data1), aes(V1, V2)) + #, shape = as.factor(V3)
geom_point() +
geom_abline(intercept = bound1$intcpt,
slope = bound1$slope, aes(color = "abcd")) +
geom_abline(intercept = bound2$intcpt,
slope = bound2$slope, aes(color = "xyz")) +
scale_colour_discrete("")
ggplot(as.data.frame(ex6data1), aes(x = V1, y = V2)) +
geom_point(size = 3)
ggplot(as.data.frame(ex6data1), aes(x = V1, y = V2)) +
geom_point() +
geom_abline(aes(colour="one-to-one"), intercept =0, slope = 1, size = 1) +
stat_smooth(aes(colour="best fit"), method = "lm", se = FALSE, size = 1) +
#facet_wrap(~ type) +
scale_colour_discrete("")
ggplot(as.data.frame(ex6data1), aes(x = V1, y = V2)) +
geom_point() +
stat_smooth(aes(colour="best fit"), method = "lm", se = FALSE, size = 1) +
geom_abline(aes(colour="one-to-one"), intercept =0, slope = 1, size = 1) +
#facet_wrap(~ type) +
scale_colour_discrete("")
ggplot(as.data.frame(ex6data1), aes(x = V1, y = V2)) +
geom_point() +
geom_abline(aes(colour="one-to-one"), intercept =0, slope = 1, size = 1) +
stat_smooth(aes(colour="best fit"), method = "lm", se = FALSE, size = 1) +
#facet_wrap(~ type) +
scale_colour_discrete("")
?readLines
readLines(file("../data/ex6data/emailSample1.txt", open = "r"))
?writeLines
writeLines(readLines(file("../data/ex6data/emailSample1.txt", open = "r")))
con <- file("../data/ex6data/emailSample1.txt", open = "r")
writeLines(readLines(con))
close(con)
?gsub
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(preProcess)
con <- file("../data/ex6data/emailSample1.txt", open = "r")
a <- writeLines(readLines(con))
close(con)
a
con <- file("../data/ex6data/emailSample1.txt", open = "r")
a <- readLines(con)
con
a
str(a)
a <- paste(a, collapse = "")
a
preProcess(a)
email
source('~/coursera-ml-R/ex6/ex6_chunks.R')
'(http|https)://[^\\s]*'
'(http|https)://[^\s]*'
'(http|https)://[^\\\\s]*'
mystring <- '(http|https)://[^\\s]*'
mystring
'(http|https)://[^\s]*'
?regex
source('~/coursera-ml-R/ex6/ex6_chunks.R')
setwd(ex6)
setwd("ex6")
con <- file("../data/ex6data/emailSample1.txt", open = "r")
writeLines(readLines(con))
close(con)
con <- file("../data/ex6data/emailSample1.txt", open = "r")
sampleEmail1 <-writeLines(readLines(con))
close(con)
sampleEmail1
con <- file("../data/ex6data/emailSample1.txt", open = "r")
writeLines(readLines(con))
sampleEmail1 <- paste(readLines(con), collapse = "")
close(con)
sampleEmail1
a <- readLines(con)
a <- paste(a, collapse = "")
a
con <- file("../data/ex6data/emailSample1.txt", open = "r")
writeLines(readLines(con))
readLines(con)
con <- file("../data/ex6data/emailSample1.txt", open = "r")
sampleEmail1 <- paste(readLines(con), collapse = "")
sampleEmail1
con <- file("../data/ex6data/emailSample1.txt", open = "r")
lines <- readLines(con)
close(con)
writeLines(lines)
sampleEmail1 <- paste(lines), collapse = "")
sampleEmail1
sampleEmail1 <- paste(lines, collapse = "")
sampleEmail1
debug(preProcess)
preProcess(sampleEmail1)
tolower(email)
email
con <- file("../data/ex6data/emailSample1.txt", open = "r")
lines <- readLines(con)
close(con)
writeLines(lines)
sampleEmail1 <- paste(lines, collapse = " ")
sampleEmail1
undebug(preProcess)
preProcess(sampleEmail1)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(emailFeatures)
source('~/coursera-ml-R/ex6/ex6_chunks.R')
debug(emailFeatures)
debug(wordInIndex)
con <- file("../data/ex6data/emailSample1.txt", open = "r")
lines <- readLines(con)
close(con)
writeLines(lines)
sampleEmail1 <- paste(lines, collapse = " ")
sampleEmail1
e1Processed <- preProcess(sampleEmail1)
e1Processed
require(knitr)
require(ggplot2)
require(kernlab)
require(SnowballC)
read_chunk("ex6_chunks.R")
setwd("ex6")
require(knitr)
require(ggplot2)
require(kernlab)
require(SnowballC)
read_chunk("ex6_chunks.R")
e1Processed <- preProcess(sampleEmail1)
e1Processed
emailVocab <- read.table("../data/ex6data/vocab.txt", sep = "\t", row.names = 1)[,1]
vocabIndex(e1Processed, emailVocab)
emailFeatures(e1Processed, emailVocab)
index
x
index
head(emailVocab)
emailVocab <- read.table("../data/ex6data/vocab.txt", sep = "\t", row.names = 1)
head(emailVocab)
emailVocab <- read.table("../data/ex6data/vocab.txt", sep = "\t")
head(emailVocab)
vocabIndex(e1Processed, emailVocab)
vocabIndex(e1Processed, emailVocab[, 2])
emailFeatures(e1Processed, emailVocab[, 1])
head(index)
index
source('~/coursera-ml-R/ex6/ex6_chunks.R')
emailFeatures(e1Processed, emailVocab[, 1])
emailFeatures(e1Processed, emailVocab)
debug(emailFeatures)
emailFeatures(e1Processed, emailVocab)
email
head(vocab)
vocab[1, ]
source('~/coursera-ml-R/ex6/ex6_chunks.R')
emailFeatures(e1Processed, emailVocab)
a <- emailFeatures(e1Processed, emailVocab)
sum(a)
vocabIndex(e1Processed, emailVocab[, 2])
length(a)
testIndices <- c(86,, 916, 794, 1077, 883, 370, 1699, 790, 1822, 1831, 883, 431, 1171, 794, 1002, 1893, 1364, 592, 1676, 238, 162, 89, 688, 945, 1663, 1120, 1062, 1699, 375, 1162, 479, 1893, 1510, 799, 1182, 1237, 810, 1895, 1440, 1547, 181, 1699, 1758, 1896, 688, 1676, 992, 961, 1477, 71, 530, 1699, 531)
testIndices <- c(86, 916, 794, 1077, 883, 370, 1699, 790, 1822, 1831, 883, 431, 1171, 794, 1002, 1893, 1364, 592, 1676, 238, 162, 89, 688, 945, 1663, 1120, 1062, 1699, 375, 1162, 479, 1893, 1510, 799, 1182, 1237, 810, 1895, 1440, 1547, 181, 1699, 1758, 1896, 688, 1676, 992, 961, 1477, 71, 530, 1699, 531)
sampleIndexed <- vocabIndex(e1Processed, emailVocab[, 2])
sampleIndexed
dim(sampleIndexed)
length(sampleIndexed)
length(testIndices)
testIndices==sampleIndexed
sampleIndexed[15]
wordStem("visitors")
wordStem("visitor")
wordStem("visito")
wordStem("visit")
source('~/coursera-ml-R/ex6/ex6_chunks.R')
